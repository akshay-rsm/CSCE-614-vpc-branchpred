#include <iostream>
#include <map>
using namespace std;
#define PERCEPTRON_SIZE 20

int sign(int y)
    {
        int sign =(y>0) - (y<0);
        return sign;
    }

class perceptron_node
{
    public:
    int key;
    int perceptron[PERCEPTRON_SIZE] ;
    perceptron_node* prev,*next;
    perceptron_node(int k): key(k), next(NULL), prev(NULL)
    {
        perceptron[PERCEPTRON_SIZE] = {0};
    }
};

class perceptron_list
{
    
    public:
    
    perceptron_node *front,*rear;
    
    perceptron_list(): front(NULL), rear(NULL){}
    
    bool no_entries()
    {
        if(rear == NULL)
        {
            return true;
        }
        return false;
    }
    
    
    perceptron_node* add_to_head(int key)
    {
        
        perceptron_node* page = new perceptron_node(key);
        if(!front && !rear)
        {
            front = rear = page;
        }
        else
        {
            page->next = front;
            page->prev = NULL;
            front->prev = page;
            front = page;
        }
        return page;
    }
    
    void move_page_to_head(perceptron_node* page)
    {
        if(page==front)
        {
            return;
        }
        if(page==rear)
        {
            rear = rear->prev;
            rear->next = NULL;
        }
        else
        {
            page->prev->next = page->next;
            page->next->prev = page->prev;
        }
        page->next = front;
        page->prev = NULL;
        front->prev = page;
        front = page;
    }
    
    void remove_rear()
    {
        if(no_entries())
        {
            return;
        }
        if(front == rear)
        {
            delete rear;
            front = NULL;
            rear = NULL;
        }
        else
        {
            perceptron_node* temp = rear;
            rear = rear->prev;
            rear->next = NULL;
            delete temp;
        }
    }
    perceptron_node* get_rear()
    {
        return rear;
    }
};

